desc:sd_4band_eq

slider1:hpFreq=20<20, 1050, 1>HP Freq
slider2:hpQ=0.5<0.1, 7, 0.01>Q
slider3:lpFreq=22000<3000, 22000, 1>LP Freq
slider4:lpQ=0.5<0.1, 7, 0.01>Q

slider6:lowType=0<0,1,1{Shelf,Peak}>Low Type
slider7:lowFreq=200<30,450,1>Freq
slider8:lowQ=0.5<0.1, 7, 0.01>Q
slider9:lowGain=0<-15, 15, 0.01>Gain (dB)

slider11:loMidFreq=1000<200,2500,1>Lo Mid Freq
slider12:loMidQ=0.5<0.1, 7, 0.01>Q
slider13:loMidGain=0<-15, 15, 0.01>Gain (dB)

slider15:hiMidFreq=3000<600,7000,1>Hi Mid Freq
slider16:hiMidQ=0.5<0.1, 7, 0.01>Q
slider17:hiMidGain=0<-15, 15, 0.01>Gain (dB)

slider19:highType=0<0,1,1{Shelf,Peak}>High Type
slider20:highFreq=8000 <20, 20000, 1>Freq
slider21:highQ=0.5 <0.1, 7, 0.01>Q
slider22:highGain=0 <-15, 15, 0.01>Gain (dB)

slider200:outputGainDb=0<-15, 15, 0.01>Output Gain (dB)

@init

channels = 2; // FIXME can we make use of num_ch?

function createStereoBuffer(offset)
  (
    this.y = offset + 0;
    this.y1 = offset + channels;
    this.y2 = offset + channels * 2;
    this.x = offset + channels * 3;
    this.x1 = offset + channels * 4;
    this.x2 = offset + channels * 5;
  );

function setHpCoefs()
  local(omega sinOmega cosOmega alpha)
  (
    omega = 2 * $pi * hpFreq / srate;
    sinOmega = sin(omega);
    cosOmega = cos(omega);
    alpha = sinOmega / (2 * hpQ);

    this.b0 = (1 + cosOmega) / 2;
    this.b1 = - (1 + cosOmega);
    this.b2 = (1 + cosOmega) / 2;
    this.a0 = 1 + alpha;
    this.a1 = -2 * cosOmega;
    this.a2 = 1 - alpha;
  );

function setLpCoefs()
  local(omega sinOmega cosOmega alpha)
  (
    omega = 2 * $pi * lpFreq / srate;
    sinOmega = sin(omega);
    cosOmega = cos(omega);
    alpha = sinOmega / (2 * lpQ);

    this.b0 = (1 - cosOmega) / 2;
    this.b1 = 1 - cosOmega;
    this.b2 = (1 - cosOmega) / 2;
    this.a0 = 1 + alpha;
    this.a1 = -2 * cosOmega;
    this.a2 = 1 - alpha;
  );

function setLowShelfCoefs()
  local(A, omega, sinOmega, cosOmega, alpha)
  (
    A = 10 ^ (lowGain / 40);
    omega = 2 * $pi * lowFreq / srate;
    sinOmega = sin(omega);
    cosOmega = cos(omega);
    alpha = sinOmega / (2 * lowQ);

    this.b0 = A * ((A + 1) - (A - 1) * cosOmega + 2 * sqrt(A) * alpha);
    this.b1 = 2 * A * ((A - 1) - (A + 1) * cosOmega);
    this.b2 = A * ((A + 1) - (A - 1) * cosOmega - 2 * sqrt(A) * alpha);
    this.a0 = (A + 1) + (A - 1) * cosOmega + 2 * sqrt(A) * alpha;
    this.a1 = -2 * ((A - 1) + (A + 1) * cosOmega);
    this.a2 = (A + 1) + (A - 1) * cosOmega - 2 * sqrt(A) * alpha;
  );

function setPeakCoefs(freq, gain, q)
  local(A, omega, sinOmega, cosOmega, alpha)
  (
    A = 10 ^ (gain / 40);
    omega = 2 * $pi * freq / srate;
    sinOmega = sin(omega);
    cosOmega = cos(omega);
    alpha = sinOmega / (2 * q);

    this.b0 = 1 + alpha * A;
    this.b1 = -2 * cosOmega;
    this.b2 = 1 - alpha * A;
    this.a0 = 1 + alpha / A;
    this.a1 = -2 * cosOmega;
    this.a2 = 1 - alpha / A;
  );

function setHighShelfCoefs()
  local(A, omega, sinOmega, cosOmega, alpha)
  (
    A = 10 ^ (highGain / 40);
    omega = 2 * $pi * highFreq / srate;
    sinOmega = sin(omega);
    cosOmega = cos(omega);
    alpha = sinOmega / (2 * highQ);

    this.b0 = A * ((A + 1) + (A - 1) * cosOmega + 2 * sqrt(A) * alpha);
    this.b1 = -2 * A * ((A - 1) + (A + 1) * cosOmega);
    this.b2 = A * ((A + 1) + (A - 1) * cosOmega - 2 * sqrt(A) * alpha);
    this.a0 = (A + 1) - (A - 1) * cosOmega + 2 * sqrt(A) * alpha;
    this.a1 = 2 * ((A - 1) - (A + 1) * cosOmega);
    this.a2 = (A + 1) - (A - 1) * cosOmega - 2 * sqrt(A) * alpha;
  );

function processSample(
  prevValue, ch,
  x, x1, x2,
  y, y1, y2,
  a0, a1, a2,
  b0, b1, b2
)
  (
    y2[ch] = y1[ch];
    y1[ch] = y[ch];
    y[ch] = (b0 / a0) * x[ch]
      + (b1 / a0) * x1[ch]
      + (b2 / a0) * x2[ch]
      - (a1 / a0) * y1[ch]
      - (a2 / a0) * y2[ch];

    x2[ch] = x1[ch];
    x1[ch] = x[ch];
    x[ch] = prevValue;

    y[ch];
  );

hpBuffer.createStereoBuffer(0);
lpBuffer.createStereoBuffer(256);
lowShelfBuffer.createStereoBuffer(512);
lowBuffer.createStereoBuffer(768);
loMidBuffer.createStereoBuffer(1024);
hiMidBuffer.createStereoBuffer(1280);
highShelfBuffer.createStereoBuffer(1536);
highBuffer.createStereoBuffer(1792);

hpCoefs.setHpCoefs();
lpCoefs.setLpCoefs();
lowShelfCoefs.setLowShelfCoefs();
lowCoefs.setPeakCoefs(lowFreq, lowGain, lowQ);
loMidCoefs.setPeakCoefs(loMidFreq, loMidGain, loMidQ);
hiMidCoefs.setPeakCoefs(hiMidFreq, hiMidGain, hiMidQ);
highShelfCoefs.setHighShelfCoefs();
highCoefs.setPeakCoefs(highFreq, highGain, highQ);

@slider

hpCoefs.setHpCoefs();
lpCoefs.setLpCoefs();
lowShelfCoefs.setLowShelfCoefs();
lowCoefs.setPeakCoefs(lowFreq, lowGain, lowQ);
loMidCoefs.setPeakCoefs(loMidFreq, loMidGain, loMidQ);
hiMidCoefs.setPeakCoefs(hiMidFreq, hiMidGain, hiMidQ);
highShelfCoefs.setHighShelfCoefs();
highCoefs.setPeakCoefs(highFreq, highGain, highQ);

outputGain = 10 ^ ( outputGainDb / 20 );

@sample

ch = -1;

loop(2,
ch += 1;

    value = spl(ch);

    // High Pass
    hpFreq > 20 ? (
      value = processSample(
        value, ch,
        hpBuffer.x, hpBuffer.x1, hpBuffer.x2,
        hpBuffer.y, hpBuffer.y1, hpBuffer.y2,
        hpCoefs.a0, hpCoefs.a1, hpCoefs.a2,
        hpCoefs.b0, hpCoefs.b1, hpCoefs.b2
      );
    );

    // Low Pass
    lpFreq < 22000 ? (
      value = processSample(
        value, ch,
        lpBuffer.x, lpBuffer.x1, lpBuffer.x2,
        lpBuffer.y, lpBuffer.y1, lpBuffer.y2,
        lpCoefs.a0, lpCoefs.a1, lpCoefs.a2,
        lpCoefs.b0, lpCoefs.b1, lpCoefs.b2
      );
    );

    // Low Band
    lowGain != 0 ? (
      lowType == 0 ? (
        value = processSample(
          value, ch,
          lowShelfBuffer.x, lowShelfBuffer.x1, lowShelfBuffer.x2,
          lowShelfBuffer.y, lowShelfBuffer.y1, lowShelfBuffer.y2,
          lowShelfCoefs.a0, lowShelfCoefs.a1, lowShelfCoefs.a2,
          lowShelfCoefs.b0, lowShelfCoefs.b1, lowShelfCoefs.b2
        );
      ) : (
        value = processSample(
          value, ch,
          lowBuffer.x, lowBuffer.x1, lowBuffer.x2,
          lowBuffer.y, lowBuffer.y1, lowBuffer.y2,
          lowCoefs.a0, lowCoefs.a1, lowCoefs.a2,
          lowCoefs.b0, lowCoefs.b1, lowCoefs.b2
        );
      )
    );

    // Lo Mid Band
    loMidGain != 0 ? (
        value = processSample(
          value, ch,
          loMidBuffer.x, loMidBuffer.x1, loMidBuffer.x2,
          loMidBuffer.y, loMidBuffer.y1, loMidBuffer.y2,
          loMidCoefs.a0, loMidCoefs.a1, loMidCoefs.a2,
          loMidCoefs.b0, loMidCoefs.b1, loMidCoefs.b2
        );
    );

    // Hi Mid Band
    hiMidGain != 0 ? (
        value = processSample(
          value, ch,
          hiMidBuffer.x, hiMidBuffer.x1, hiMidBuffer.x2,
          hiMidBuffer.y, hiMidBuffer.y1, hiMidBuffer.y2,
          hiMidCoefs.a0, hiMidCoefs.a1, hiMidCoefs.a2,
          hiMidCoefs.b0, hiMidCoefs.b1, hiMidCoefs.b2
        );
    );

    // High Band
    highGain != 0 ? (
      highType == 0 ? (
        value = processSample(
          value, ch,
          highShelfBuffer.x, highShelfBuffer.x1, highShelfBuffer.x2,
          highShelfBuffer.y, highShelfBuffer.y1, highShelfBuffer.y2,
          highShelfCoefs.a0, highShelfCoefs.a1, highShelfCoefs.a2,
          highShelfCoefs.b0, highShelfCoefs.b1, highShelfCoefs.b2
        );
      ) : (
        value = processSample(
          value, ch,
          highBuffer.x, highBuffer.x1, highBuffer.x2,
          highBuffer.y, highBuffer.y1, highBuffer.y2,
          highCoefs.a0, highCoefs.a1, highCoefs.a2,
          highCoefs.b0, highCoefs.b1, highCoefs.b2
        );
      )
    );

    spl(ch) = value * outputGain;
);

